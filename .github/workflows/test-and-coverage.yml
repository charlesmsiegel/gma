name: Test and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: gma
        environment-file: environment.yml
        python-version: 3.11
        auto-activate-base: false

    - name: Cache conda dependencies
      uses: actions/cache@v4
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-

    - name: Set up test environment variables
      run: |
        echo "DB_NAME=gm_app_db" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-only" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=gm_app.settings" >> $GITHUB_ENV

    - name: Create database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE gm_app_db;"
      shell: bash -l {0}

    - name: Run Django system checks
      run: |
        conda run -n gma python manage.py check --deploy
      shell: bash -l {0}

    - name: Test PostgreSQL integration with polymorphic models
      run: |
        # Set up environment variables for PostgreSQL integration test
        export DB_HOST=localhost
        export DB_PORT=5432
        export DB_NAME=gm_app_db
        export DB_USER=postgres
        export DB_PASSWORD=postgres
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key-for-github-actions-only
        export DEBUG=False
        export DJANGO_SETTINGS_MODULE=gm_app.settings

        # Generate migrations (should show no changes since polymorphic is in migrations)
        conda run -n gma python manage.py makemigrations --verbosity=2

        # Run migrations against PostgreSQL
        conda run -n gma python manage.py migrate --verbosity=0

        # Run health check to verify PostgreSQL and Redis work
        conda run -n gma python manage.py health_check

        # Test that polymorphic Location works in PostgreSQL
        conda run -n gma python -c "
        import os, django;
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gm_app.settings');
        django.setup();
        from locations.models import Location;
        from django.contrib.auth import get_user_model;
        from campaigns.models import Campaign;
        User = get_user_model();
        user = User.objects.create_user('test_user', 'test@example.com', 'password123');
        campaign = Campaign.objects.create(name='Test Campaign', owner=user, game_system='test');
        location = Location.objects.create(name='Test Location', campaign=campaign, created_by=user);
        print('Polymorphic Location created:', location.name);
        print('Has polymorphic_ctype:', hasattr(location, 'polymorphic_ctype'));
        print('Polymorphic ctype:', location.polymorphic_ctype);
        print('PostgreSQL polymorphic integration test passed!')
        "
      shell: bash -l {0}

    - name: Run test-coverage workflow
      id: test_run
      run: |
        # Set up environment variables for test settings
        # Note: test_settings.py uses SQLite in-memory, not PostgreSQL
        export SECRET_KEY=test-secret-key-for-github-actions-only
        export DEBUG=False

        set +e  # Don't exit on error

        # Run the complete test-coverage workflow using same commands as Makefile
        # This matches exactly what "make test-coverage" does locally
        conda run -n gma coverage run manage.py test --settings=gm_app.test_settings
        TEST_EXIT_CODE=$?
        echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

        # Generate coverage reports (following Makefile pattern)
        conda run -n gma coverage xml
        conda run -n gma coverage report --precision=2 --show-missing --skip-covered
        conda run -n gma coverage html
        conda run -n gma coverage report --fail-under=80

        exit 0  # Always exit successfully from this step
      shell: bash -l {0}
      continue-on-error: false

    - name: Check if tests passed
      run: |
        echo "Test exit code was: ${{ steps.test_run.outputs.TEST_EXIT_CODE }}"
        if [ "${{ steps.test_run.outputs.TEST_EXIT_CODE }}" != "0" ] && [ "${{ steps.test_run.outputs.TEST_EXIT_CODE }}" != "" ]; then
          echo "Tests failed - failing the workflow"
          exit 1
        fi
      shell: bash -l {0}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage to Codacy
      uses: codacy/codacy-coverage-reporter-action@v1
      if: always()
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: coverage.xml

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      run: |
        conda run -n gma coverage report --format=markdown > coverage_comment.md
        echo "## ðŸ“Š Coverage Report" >> pr_comment.md
        echo "" >> pr_comment.md
        cat coverage_comment.md >> pr_comment.md
        echo "" >> pr_comment.md
        echo "Minimum coverage required: 80%" >> pr_comment.md
      shell: bash -l {0}
      continue-on-error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: gma
        environment-file: environment.yml
        python-version: 3.11
        auto-activate-base: false

    - name: Set up test environment variables
      run: |
        echo "DB_NAME=gm_app_db" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-integration-tests" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=gm_app.settings" >> $GITHUB_ENV

    - name: Create database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE gm_app_db;"
      shell: bash -l {0}

    - name: Setup integration test environment
      run: |
        # Set up environment variables for integration tests
        export DB_HOST=localhost
        export DB_PORT=5432
        export DB_NAME=gm_app_db
        export DB_USER=postgres
        export DB_PASSWORD=postgres
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key-for-integration-tests
        export DEBUG=False
        export DJANGO_SETTINGS_MODULE=gm_app.settings

        # Generate migrations and run them
        conda run -n gma python manage.py makemigrations --verbosity=2
        conda run -n gma python manage.py migrate --verbosity=0

        # Run integration tests
        conda run -n gma python manage.py test tests.test_project_setup --verbosity=2
      shell: bash -l {0}
